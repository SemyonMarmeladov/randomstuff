#+TITLE: 99 Questions in hiaskell


* 1-10
    I did all of these while listening to Nena 99 luftballons
 hast du *something* ziet fur mich? singnbopbop fur dich


** Exercise 1
Find the last element of the list
#+begin_src haskell
revers :: [a] -> a
revers = head . reverse

revers [1,2,3]
#+end_src

#+RESULTS:
: Prelude> Prelude> 3

** Exercise 2
Find the last-but-one element
hmm, how do i not pattern match here?

#+begin_src haskell
rev2 :: [a] -> a
rev2 = head . tail . reverse

rev2 [1,2,5 ,3]
#+end_src

** Exercise 3
Find the 1-indexed k'th element

#+begin_src haskell
ind :: [a] -> a
ind lst k = lst !! (k - 1)
ind [1,2,3] 1
  -- You would do some kind of index checking
#+end_src
#+RESULTS:
: Prelude> 1

** Exercise 4
Length finding
 #+begin_src haskell
myLength :: [a] -> Int
myLength l = foldr (\_ -> (+1)) 0 l

myLength [1,2,3]
 #+end_src

 #+RESULTS:
 : Prelude> Prelude> 3
** Exercise 5
Reverse a list
#+begin_src haskell
rev :: [a] -> [a]
rev l = foldr (\a b -> b:a) [] l

ll = [1,2,3,4]
rev ll
#+end_src

** Exercise 6
Palindrome
#+begin_src haskell
palindrome :: [a] -> Bool
palindrome lst = lst == (reverse lst)
palindrome "abba"
#+end_src
#+RESULTS:
: Prelude> True
** Exercise 7
Flatten af list
#+begin_src haskell
flatten3 :: NestedList a -> [a]
flatten3 (Elem x ) = [x]
flatten3 (List xs) =  foldr (++) [] $ map flatten3 xs


#+end_src

#+RESULTS:
: <interactive>:4:11-14: error: Not in scope: data constructor ‘List’

** Exercise 8
Remove duplicates
#+begin_src haskell
compress :: Eq a => [a] -> [a]
compress xs = foldr f (const []) xs Nothing
  where
    f x r a@(Just q) | x == q = r a
    f x r _ = x : r (Just x)
compress "aaaabbbab"
#+end_src

#+RESULTS:
: Prelude> Prelude> "aaaabbbab"

** Exercise 8
Pack duplicates into a list. Should probably implement this huh
#+begin_src haskell
import Data.List
pack :: Eq a => [a] -> [[a]]
pack = group
pack [1,1,1,2,2,3,3,3,4,3]


{-
I should probably have implemented group.
look at this
pack (x:xs) = let (first,rest) = span (==x) xs
               in (x:first) : pack rest
pack [] = []

-}
#+end_src

#+RESULTS:
: Prelude Data.List> [[1,1,1],[2,2],[3,3,3],[4],[3]]
** Exercise 9
* 10-20
** Exercise 11-13
Encode lengths. it's all variatians of this.

#+begin_src haskell

-- |
import Data.List
data Encoding = Singleton Char
              | Multiple Char Int
              deriving (Show)

encode :: String -> [Encoding]
encode xs = [y | x <- group xs,
             let y = if (length x) == 1 then Singleton (head x)
                     else Multiple (head x) (length x)]

encode "aabbcc"
#+end_src

** Exercise 14
Duplicate each elementÆ

#+begin_src haskell
dupli :: [a] -> [a]
dupli [] = []
dupli (x:xs) = (x:x:dupli xs)

dupli [1,2,3]
#+end_src

** Exercise 15
replicate each element n times
#+begin_src haskell
import Control.Monad
repli :: Int ->  [a] -> [a]
repli n l = l >>= replicate n

repli 3 [1,2,3]
#+end_src

** Exercise 16
Delete every N'th element of a list
#+begin_src haskell
nth :: Int -> Int -> [a] -> [a]
nth _ _ [] = []
nth 1 acc (_:xs) = (nth acc acc xs)
nth n acc (x:xs) = x : (nth (n-1) acc xs)

nth 3 3 "abcdefghijkl"
#+end_src
** Exercise 17
split a list at an index.
#+begin_src haskell
-- Should have a guard yaknow
-- guard checking length or calling spl WHERE spl is this.
spl :: ([a], [a]) -> Integer -> ([a],[a])
spl l 0 = l
spl (xs, (y:ys)) acc = (spl ((y:xs), ys) (acc - 1))

split3 :: [a] -> Integer -> ([a], [a])
split3 l acc = spl ([], l) acc

#+end_src
** Exercise 18
slice the list... OH jesus i'll be back
#+begin_src haskell
msplice ::
msplice s e ls
  | (length ls) < e -> []
  | e < s           -> []
  | otherwise       -> splice' s e ls
    where
          splice' :: Integer -> Integer -> [a] -> ([a],[a])
          splice' s e ls =

#+end_src

#+RESULTS:
: <interactive>:9:27: error:
:     parse error (possibly incorrect indentation or mismatched brackets)
** Exercise 19

** Exercise 20
#+begin_src haskell
removeAt :: Integer -> String -> (Char, String)
removeAt n x  = ( (x !! (n-1)), take (n - 1) x ++ drop n x )
(removeAt 5 "Hello")
#+end_src
* 20-28
** Problem 21
insert smfin'
#+begin_src haskell
insertAt :: Char -> String -> Integer -> String
insertAt c str n = (drop n-1 str) ++ c ++ (take n str)
#+end_src

** Problem 22
Create a range function
#+begin_src haskell
ange :: Integer -> Integer -> [Integer]
ange n lim
  | n == lim  = []
  | otherwise =  n : (ange (n + 1) lim)
#+end_src


** Problem 23
extract a given number of random element

#+begin_src haskell
import System.Random
rnd_select xs n = do
    gen <- getStdGen
    return $ take n [ xs !! x | x <- randomRs (0, (length xs) - 1) gen]

#+end_src
** Problem 24
draw n numbers from the set 1..m
#+begin_src haskell
import System.Random
diffSelect :: Int -> Int -> IO [Int]
diffSelect n m = do
  gen <- getStdGen
  return . take n $ randomRs (1, m) gen
#+end_src
** Problem 25
#+begin_src haskell
rnd_permu :: String -> String
rnd_permu s =
#+end_src

* 54-60
** 55 completely balanced binary trees. sol not mine.
#+begin_src haskell
data Tree a = Empty | Node a (Tree a) (Tree a)
  (deriving Show, Eq)

tree1 = Branch 'a' (Branch 'b' (Branch 'd' Empty Empty)
                               (Branch 'e' Empty Empty))
                   (Branch 'c' Empty
                               (Branch 'f' (Branch 'g' Empty Empty)
                                           Empty))

cbalTree :: Int -> [Tree Char]
cbalTree 0 = [Empty]
cbalTree n = let (q, r) = (n - 1) `quotRem` 2
    in [Branch 'x' left right | i     <- [q .. q + r],
                                left  <- cbalTree i,
                                right <- cbalTree (n - i - 1)]
#+end_src
